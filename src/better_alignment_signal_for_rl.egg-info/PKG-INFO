Metadata-Version: 2.1
Name: better_alignment_signal_for_rl
Version: 0.1
Description-Content-Type: text/markdown
Requires-Dist: ipython>=8.10
Requires-Dist: jupyterlab>=3.0
Requires-Dist: kedro~=0.19.3
Requires-Dist: kedro-datasets>=1.0
Requires-Dist: kedro-telemetry>=0.3.1
Requires-Dist: kedro-viz>=6.7.0
Requires-Dist: ruff~=0.1.8
Requires-Dist: optuna~=3.6.1
Requires-Dist: tqdm~=4.66.2
Requires-Dist: ipylab>=1.0.0
Requires-Dist: notebook>=7.0.0
Requires-Dist: numpy==1.23.5
Requires-Dist: torch==2.0.1
Requires-Dist: POT==0.9.1
Requires-Dist: stable-baselines3==1.8.0
Requires-Dist: crafter==1.8.1
Requires-Dist: pygame~=2.5.2
Requires-Dist: ruamel.yaml==0.17.40
Requires-Dist: PyYAML==6.0.1
Requires-Dist: wandb==0.15.11
Requires-Dist: imageio[ffmpeg]~=2.34.0
Requires-Dist: gym[atari]~=0.21.0
Requires-Dist: gym[accept-rom-license]
Requires-Dist: minigrid~=2.3.1
Requires-Dist: transformers~=4.39.3
Requires-Dist: datasets~=2.18.0
Requires-Dist: torchvision~=0.15.2
Requires-Dist: accelerate~=0.30.1
Requires-Dist: icecream
Requires-Dist: python-dotenv
Requires-Dist: pandarallel
Requires-Dist: av
Requires-Dist: einops~=0.7.0
Provides-Extra: docs
Requires-Dist: docutils<0.18.0; extra == "docs"
Requires-Dist: sphinx~=3.4.3; extra == "docs"
Requires-Dist: sphinx_rtd_theme==0.5.1; extra == "docs"
Requires-Dist: nbsphinx==0.8.1; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints==1.11.1; extra == "docs"
Requires-Dist: sphinx_copybutton==0.3.1; extra == "docs"
Requires-Dist: ipykernel<7.0,>=5.3; extra == "docs"
Requires-Dist: Jinja2<3.1.0; extra == "docs"
Requires-Dist: myst-parser~=0.17.2; extra == "docs"

# better_alignment_signal_for_rl

## Overview

This is your new Kedro project with Kedro-Viz setup, which was generated using `kedro 0.19.3`.

Take a look at the [Kedro documentation](https://docs.kedro.org) to get started.

## Rules and guidelines

In order to get the best out of the template:

* Don't remove any lines from the `.gitignore` file we provide
* Make sure your results can be reproduced by following a [data engineering convention](https://docs.kedro.org/en/stable/faq/faq.html#what-is-data-engineering-convention)
* Don't commit data to your repository
* Don't commit any credentials or your local configuration to your repository. Keep all your credentials and local configuration in `conf/local/`

## How to install dependencies

Declare any dependencies in `requirements.txt` for `pip` installation.

To install them, run:

```
pip install -r requirements.txt
```

## How to run your Kedro pipeline

You can run your Kedro project with:

```bash
kedro run
kedro run -p env_setup --params "env_name=minigrid" # to override the default configuration and specify a pipeline
```

## How to test your Kedro project

Have a look at the files `src/tests/test_run.py` and `src/tests/pipelines/test_data_science.py` for instructions on how to write your tests. Run the tests as follows:

```
pytest
```

To configure the coverage threshold, look at the `.coveragerc` file.

## Project dependencies

To see and update the dependency requirements for your project use `requirements.txt`. Install the project requirements with `pip install -r requirements.txt`.

[Further information about project dependencies](https://docs.kedro.org/en/stable/kedro_project_setup/dependencies.html#project-specific-dependencies)

## How to work with Kedro and notebooks

> Note: Using `kedro jupyter` or `kedro ipython` to run your notebook provides these variables in scope: `catalog`, `context`, `pipelines` and `session`.
>
> Jupyter, JupyterLab, and IPython are already included in the project requirements by default, so once you have run `pip install -r requirements.txt` you will not need to take any extra steps before you use them.

### Jupyter
To use Jupyter notebooks in your Kedro project, you need to install Jupyter:

```
pip install jupyter
```

After installing Jupyter, you can start a local notebook server:

```
kedro jupyter notebook
```

### JupyterLab
To use JupyterLab, you need to install it:

```
pip install jupyterlab
```

You can also start JupyterLab:

```
kedro jupyter lab
```

### IPython
And if you want to run an IPython session:

```
kedro ipython
```

### How to ignore notebook output cells in `git`
To automatically strip out all output cell contents before committing to `git`, you can use tools like [`nbstripout`](https://github.com/kynan/nbstripout). For example, you can add a hook in `.git/config` with `nbstripout --install`. This will run `nbstripout` before anything is committed to `git`.

> *Note:* Your output cells will be retained locally.

[Further information about using notebooks for experiments within Kedro projects](https://docs.kedro.org/en/develop/notebooks_and_ipython/kedro_and_notebooks.html).
## Package your Kedro project

[Further information about building project documentation and packaging your project](https://docs.kedro.org/en/stable/tutorial/package_a_project.html).


## Known Issue

### `libstdc++.so.6` issue on conda environment

If you encounter the following error message:

```bash
MESA-LOADER: failed to open radeonsi: /home/xxxxxh/anaconda3/envs/minigrid/bin/../lib/libstdc++.so.6: version `GLIBCXX_3.4.30' not found (required by /usr/lib/dri/radeonsi_dri.so) (search paths /usr/lib/dri, suffix _dri)
failed to load driver: radeonsi
```


**Fixing libstdc++ Issue**:
 - If you're using **Anaconda**, it might be causing the problem.
 - Follow these steps to resolve it:
   1. Open a terminal or command prompt.
   2. Navigate to your Anaconda environment's library folder:
      ```
      cd /home/$USER/anaconda3/envs/$CondaEnv/lib
      ```
      (Replace `$USER` with your actual username.)
   3. Create a backup folder to keep the original **libstdc++**:
      ```bash
      mkdir backup
      ```
   4. Move all **libstdc++** files (including soft links) to the backup folder:
      ```bash
      mv libstd* backup
      ```
   5. Copy the system's **libstdc++.so.6** to your Anaconda environment:
      ```bash
      cp /usr/lib/libstdc++.so* ./
      ```

 - This should associate the correct **libstdc++** version with your system's driver.


### `render_mode="rgb_array" or "human"`

If you want to show the performance of your trained model, you can use `render_mode="human"`. However, when you want to train your model, you should use `render_mode="rgb_array"` and the engine will not render the display of the environment. 

If you want to try your self. You can check code in `notebooks/human_env_try.py` 
